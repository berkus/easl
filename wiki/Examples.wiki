#summary Examples

= Introduction =
This page will show some examples of how to use EASL.


= Example 1: Simple Operations =
This example demonstrates how to use traditional C-like string manipulation routines for strings.

Code:
{{{
#include <easl/easl.h>
#include <iostream>

int main()
{
    char str1[1024];
    esl::strcpy(str1, "Hello, World!");

    wchar_t *str2 = new wchar_t[1024];
    esl::strcpy(str2, L"Hello!", 1024);

    std::cout << "String 1 length:  " << esl::strlen(str1) << std::endl;
    std::cout << "String 1 content: " << str1 << std::endl << std::endl;

    std::wcout << L"String 2 length:  " << esl::strlen(str2) << std::endl;
    std::wcout << L"String 2 content: " << str2 << std::endl;

    delete [] str2;

    return 0;
}
}}}

Output
{{{
String 1 length:  13
String 1 content: Hello, World!

String 2 length:  6
String 2 content: Hello!
}}}

Here the generic API is put to use. We can see that the same function is called for both types of strings. So there is not more `strcpy()`/`wcscpy()` juggling!

We've creating one string with a static array and another with a dynamic array. We use the same technique as the standard C++ library by not requiring us to specify the size of the destination buffer for the static array. The size must be explicitly specified for the dynamic array, however.


= Example 2: Simple Conversion =
This example demonstrates EASL's ability to convert between different types of strings. In this example, we do a simple conversion between an archaic ANSI `char *` string and a `wchar_t *` string. This type of conversion is convienient if some system function expects the string as a `wchar_t *`.

Code:
{{{
#include "easl.h"
#include <iostream>

int main()
{
    const char *source = "Hello, World!";

    size_t size = esl::strconvertsize<wchar_t>(source);
    wchar_t *dest = new wchar_t[size];
    esl::strconvert(dest, source);

    std::wcout << L"Converted String: " << dest << std::endl;

    return 0;
}
}}}

Output:
{{{
Converted String: Hello, World!
}}}